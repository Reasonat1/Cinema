<?php

/**
 * @file
 * An installation file for Panopoly Widgets
 */

/**
 * Implementation of hook_install().
 */
function my_pane_install() {

}


/**
 * Implementation of hook_uninstall().
 */
function my_pane_uninstall() {

  // Retrieve the file IDs for default files
  $fids = array(
    'my_pane_default_gallery_fid' => variable_get('my_pane_default_gallery_fid', NULL),
  );

  foreach($fids as $variable_name => $fid) {

    // Deletes the file
    if (!empty($fid) && $file = file_load($fid)) {
      file_delete($file);
    }

    // Deletes the variable
    variable_del($variable_name);
  }

  variable_del('my_pane_gallery_pause_play_buttons');
  variable_del('my_pane_gallery_rotation_time');
}

/**
 * Implementation of hook_field_schema().
 */
function my_pane_field_schema($field) {
  if ($field['type'] == 'panopoly_gallery') {
    $schema['columns']['title'] = array(
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    );
    $schema['columns']['subtitle'] = array(
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    );

    $schema['columns']['description'] = array(
      'type' => 'text',
      'size' => 'big',
      'not null' => FALSE,
    );

    $schema['columns']['fid'] = array(
      'type' => 'int', 
      'not null' => FALSE,
      'unsigned' => TRUE,
    );

    $schema['columns']['link'] = array(
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    );

    $schema['columns']['alt'] = array(
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    );

    $schema['indexes'] = array(
      'fid' => array('fid'),
    );

    $schema['foreign keys'] = array(
      'fid' => array(
        'table' => 'file_managed',
        'columns' => array('fid' => 'fid'),
      ),
    );

    return $schema;
  }
}

/**
 * Implements hook_update_dependencies().
 */
function my_pane_update_dependencies() {
  $deps = array();
  $deps['my_pane'][7005] = array(
    // I think that file_load() in our my_pane_update_7005() will
    // attempt to use pathauto, which means it's a dependency.
    'panopoly_core' => 7002,
  );
  return $deps;
}

/**
 * Implementation of hook_update_N().
 *
 * Adding the default files for images, gallerys, and files to the database
 */
function my_pane_update_7001(&$sandbox) {
  // This section has been removed
}

/**
 * Implementation of hook_update_N().
 *
 * Revert my_pane fields to avoid data loss in update 7003.
 */
function my_pane_update_7002(&$sandbox) {
  module_load_include('inc', 'features', 'features.export');
  features_include();
  // Need to give both the old Features 1.0 'field' component, and the new
  // Features 2.0 'field_base' and 'field_instance' because we can't be sure of
  // the version the user is upgrading to.
  features_revert(array('my_pane' => array('field', 'field_base', 'field_instance')));
}

/**
 * Implementation of hook_update_N().
 *
 * Move video mediafield data into a file field.
 */
function my_pane_update_7003(&$sandbox) {
  // Move data from 'field_video_video' to 'field_video_file' directly in the
  // database, so don't have to worry about APIs changing over time.
}

/**
 * Implements hook_update_N().
 *
 * Convert panel panes with "uuid" style subtypes into "fpid" style subtypes.
 */
function my_pane_update_7004(&$sandbox) {
  $results = db_select('panels_pane', 'p')
    ->fields('p', array('pid', 'subtype'))
    ->execute()
    ->fetchAll();
  foreach ($results as $result) {
    if (substr($result->subtype, 0, 5) == 'uuid:') {
      $uuid = substr($result->subtype, 5);
      $fpid = db_select('fieldable_panels_panes', 'fpp')
        ->fields('fpp', array('fpid'))
        ->condition('uuid', $uuid)
        ->execute()
        ->fetchField();
      if (!empty($fpid)) {
        $subtype = "fpid:" . $fpid;
        db_update('panels_pane')
        ->fields(array('subtype' => $subtype))
        ->condition('pid', $result->pid)
        ->execute();
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Removes the default content from the database and file system
 */
function my_pane_update_7005(&$sandbox) {

  // Retrieve the file IDs for default files
  $fids = array(
    'my_pane_default_gallery_fid' => variable_get('my_pane_default_gallery_fid', NULL),
  );

  foreach($fids as $variable_name => $fid) {

    // Deletes the file
    if (!empty($fid) && $file = file_load($fid)) {
      file_delete($file);
    }

    // Deletes the variable
    variable_del($variable_name);
  }
}

/**
 * Implements hook_update_N().
 *
 * Revert the 'file_display' so YouTube works in WYSIWYG with newer Media.
 */
function my_pane_update_7006(&$sandbox) {
  features_revert(array('my_pane' => array('file_display')));
}

/**
 * Implements hook_update_N().
 *
 * Add an "alt" field for gallery items.
 */
function my_pane_update_7007(&$sandbox) {
  $spec = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
  );
  $data_table_name = 'field_data_field_custom_gallery_items';
  $revision_table_name = 'field_revision_field_custom_gallery_items';
  $field_name = 'field_custom_gallery_items_alt';
  if (!db_field_exists($data_table_name, $field_name)) {
    db_add_field($data_table_name, $field_name, $spec);
  }
  if (!db_field_exists($revision_table_name, $field_name)) {
    db_add_field($revision_table_name, $field_name, $spec);
  }
}

/**
 * Setup the default for 'access media browser' permission.
 */
function my_pane_update_7008() {
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access media browser'));
}

/**
 * Make sure the new 'field_custom_gallery_duration' gets created.
 */
function my_pane_update_7009() {
  features_revert(array('my_pane' => array('field_base', 'field_instance')));
}

/**
 * Make sure the new 'field_custom_gallery_pager' field gets created.
 */
function my_pane_update_7010() {
  features_revert(array('my_pane' => array('field_base', 'field_instance')));
}

/**
 * Update the allowed file extensions in File widgets.
 */
function my_pane_update_7011() {
}

/**
 * Update 'Content item' widgets to reference NID rather than title.
 */
function my_pane_update_7012() {
  // Make sure the View for the 'Content item' widget gets updated.
  features_revert(array('my_pane' => array('views_view')));
  views_invalidate_cache();

  // Go through existing panes and update configuration.
  // We're going to load the panes directly from the 'panels_pane' table and
  // replace them with the new pane, reusing the same IDs and everything.
  // Don't try this at home, kids!
  $result = db_query("SELECT * FROM {panels_pane} WHERE type = 'views_panes' AND subtype = 'my_pane_general_content-piece_of_content'");
  $serialized_fields = array('access', 'configuration', 'cache', 'style', 'css', 'extras', 'locks');
  foreach ($result as $pane) {
    // Unserialize all the serialized fields.
    foreach ($serialized_fields as $field) {
      $pane->$field = unserialize($pane->$field);
    }

    // Load the node using the View, set the NID and clear out the title.
    $exposed =& $pane->configuration['exposed'];
    $view = views_get_view('my_pane_general_content');
    $view->set_display('piece_of_content');
    $view->set_exposed_input($exposed);
    $view->pre_execute();
    $view->execute($view->current_display);
    $view->post_execute();
    if (count($view->result) > 0) {
      $exposed['nid'] = $view->result[0]->nid;
      $exposed['title'] = '';

      // Write back to the database.
      drupal_write_record('panels_pane', $pane, array('pid'));
    }
  }
}

/**
 * Update the tablefield formatter to the new name.
 */
function my_pane_update_7013() {

}

/**
 * Rebuild theme registry so that gallery theme functions are available.
 */
function my_pane_update_7014() {
  drupal_theme_rebuild();
}

/**
 * Unset the default image for the image widget.
 */
function my_pane_update_7015() {

}

/**
 * Make sure that users can insert into the WYSIWYG.
 */
function my_pane_update_7016() {
  // Panopoly 1.29 was released without granting this permission by default, so
  // new sites launched on that version won't have it set. To avoid granting it
  // in situations where it was explicity removed on other sites, we only grant
  // it to roles that have the 'access media browser' permission (just like in
  // the media_wysiwyg_update_7201() when the permission was added by Media).

  if (module_exists('media_wysiwyg')) {
    $roles = user_roles(TRUE, 'access media browser');
    foreach ($roles as $rid => $role) {
      user_role_grant_permissions($rid, array('use media wysiwyg'));
    }
  }
}
