<?php
/**
 * Implements hook_ctools_plugin_api().
 */
function my_pane_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "file_entity" && $api == "file_default_displays") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function my_pane_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

include_once('my_pane.gallery.inc');

/**
 * The default list of allowed file extensions in file widgets.
 */
define('MY_PANE_FILE_EXTENSIONS_DEFAULT', 'txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp');

/**
 * Implements hook_init()
 */
function my_pane_init() {
    //drupal_add_js(libraries_get_path('jquery.cycle', $base_path = FALSE) . '/jquery.cycle.all.min.js');

  // Load the seven theme CSS for the media browser. This is done
  // because the seven theme may not be the admin theme, but the
  // media browser assumes that it is....
  if (arg(0) == 'media' && arg(1) == 'browser') {
    if ($GLOBALS['theme'] != 'seven') {
      drupal_add_css(drupal_get_path('theme', 'seven') . '/reset.css', array('basename' => 'seven_reset', 'group' => CSS_THEME));
      drupal_add_css(drupal_get_path('theme', 'seven') . '/style.css', array('basename' => 'seven_style', 'group' => CSS_THEME));
    }

    drupal_add_css(drupal_get_path('module', 'my_pane') . '/my-pane-media-browser.css', array('group' => CSS_THEME));
  }
}

/**
 * Implements hook_apps_app_info()
 */
function my_pane_apps_app_info() {
  return array(
    'configure form' => 'my_pane_configure_form',
  );
}

/**
 * Configuration Form for Panopoly Magic
 */
function my_pane_configure_form($form, &$form_state) {
  $form = array();

  $file_extensions = variable_get('my_pane_file_extensions', MY_PANE_FILE_EXTENSIONS_DEFAULT);
  $file_extensions = str_replace(' ', ', ', $file_extensions);
  $form['my_pane_file_extensions'] = array(
    '#title' => t('Allowed file extensions in file widgets.'),
    '#type' => 'textfield',
    '#default_value' => $file_extensions,
    '#element_validate' => array('_file_generic_settings_extensions'),
    '#description' => t('Separate extensions with a space or comma and do not include the leading dot.'),
  );

  $form['my_pane_gallery_pause_play_buttons'] = array(
    '#title' => t('Add pause/play button to all spotlight widgets.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('my_pane_gallery_pause_play_buttons', 1),
    '#description' => t('The button will appear under to the slide numbers. Helps with accessibility.'),
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'my_pane_configure_form_submit';
  return $form;
}

/**
 * Form submissions callback for my_pane_configure_form().
 */
function my_pane_configure_form_submit($form, &$form_state) {
  if ($file_instance = field_info_instance('fieldable_panels_pane', 'field_basic_file_file', 'basic_file')) {
    $file_extensions = $form_state['values']['my_pane_file_extensions'];
    $file_instance['settings']['file_extensions'] = $file_extensions;
    field_update_instance($file_instance);
  }
}

/** 
 * Implements hook_field_default_field_instances_alter().
 */
function my_pane_field_default_field_instances_alter(&$instances) {
  if (isset($instances['fieldable_panels_pane-basic_file-field_basic_file_file'])) {
    $file_extensions = variable_get('my_pane_file_extensions', MY_PANE_FILE_EXTENSIONS_DEFAULT);
    $instances['fieldable_panels_pane-basic_file-field_basic_file_file']['settings']['file_extensions'] = $file_extensions;
  }
}
/**
 * Implementation of hook_ctools_plugin_directory()
 */
function my_pane_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implement the "Content Settings" fieldset in a pre-render. This fixes issues with image caused by initially
 * doing this in a form_alter.
 *
 * @see http://drupal.org/node/1567704
 */
function my_pane_fieldable_panel_pane_pre_render($element) {
  // Add a content settings fieldset.
  $element['content_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Settings'),
    '#weight' => 1,
  );

  // Add any remaining fields to the content settings fieldset.
  foreach ($element as $key => $value) {
    if (substr($key, 0, 6) == 'field_' || $key == 'body') {
      $element['content_settings'][$key] = $value;
      unset($element[$key]);
    }
  }

  return $element;
}
/**
 * Implements hook_page_build()
 */
function my_pane_page_build(&$page) {

  // Add our custom javascript to the footer to override other things.
  drupal_add_js(drupal_get_path('module', 'my_pane') . '/my-pane.js', array('scope' => 'footer'));
  
}
/** 
 * Implementation of hook_entity_info_alter()
 */
function my_pane_entity_info_alter(&$entity_info) {
  // gallery
  $entity_info['fieldable_panels_pane']['bundles']['gallery'] = array(
    'label' => t('Add New Main Gallery'),
    'description' => t('Main Gallery'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'my_pane') . '/images/icon_spotlight.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/gallery',
     // 'access arguments' => array('administer fieldable panels panes'),
    ),
  );
    // Basic Image
  $entity_info['fieldable_panels_pane']['bundles']['sponser'] = array(
    'label' => t('Add New Sponsers Pane'),
    'description' => t('Add Sponser'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_image.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/sponser',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
  
        // carousel sponser pane
  $entity_info['fieldable_panels_pane']['bundles']['caruosel'] = array(
    'label' => t('Add New Image Carousel'),
    'description' => t('Add  Image Carousel'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/no_image.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/caruosel',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
    // Customm Lobby pane
   $entity_info['fieldable_panels_pane']['bundles']['lobby'] = array(
     'label' => t('Add Lobby'),
     'description' => t('Add  Lobby to Display'),
     'pane category' => t('Custom'),
     'pane top level' => TRUE,
     'admin' => array(
       'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
       'bundle argument' => 4,
       'real path' => 'admin/structure/fieldable-panels-panes/manage/lobby',
       'access arguments' => array('administer fieldable panels panes'),
     ),
   );
}

/**
 * Implements hook_theme().
 */
function my_pane_theme($existing, $type, $theme, $path) {
  return array(
    'panopoly_gallery_wrapper' => array(
      'render element' => 'element',
    ),
    'panopoly_gallery_view' => array(
      'render element' => 'element',
    ),
    'panopoly_caruosel_wrapper' => array(
      'render element' => 'element',
    ),
    'panopoly_caruosel_view' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implementation of hook_field_display_ENTITY_TYPE_alter().
 *
 * Update the display settings with the option selected on the entity view mode field.
 */
function my_pane_field_display_fieldable_panels_pane_alter(&$display, $context) {
  if ($context['field']['field_name'] == 'field_existing_content') {
    $view_mode = $context['entity']->field_view_mode[LANGUAGE_NONE][0]['value'];

    if (!empty($view_mode)) {
      $display['settings']['view_mode'] = $view_mode;
    }
  }
}

/**
 * Implementation of hook_file_default_displays_alter()
 */
function my_pane_file_default_displays_alter(&$default_displays) {
  // Display the 'Generic file' display on video preview.
  if (!empty($default_displays['video__preview__file_field_file_default'])) {
    $default_displays['video__preview__file_field_file_default']->status = FALSE;
  }

  // Set the default video configuration for videos
  if (!empty($default_displays['video__default__media_vimeo_video'])) {
    $default_displays['video__default__media_vimeo_video']->weight = 0;
    $default_displays['video__default__media_vimeo_video']->settings['protocol_specify'] = FALSE;
  }

  // Set the default image style for videos to be our custom video image style
  if (!empty($default_displays['video__default__media_vimeo_image'])) {
    $default_displays['video__default__media_vimeo_image']->settings['image_style'] = 'panopoly_image_video';
  }

  // Set the teaser image style for videos to be our custom video image style
  if (!empty($default_displays['video__teaser__media_vimeo_image'])) {
    $default_displays['video__teaser__media_vimeo_image']->settings['image_style'] = 'panopoly_image_video';
  }

  // Set the preview image style for videos to be our custom thumbnail image style
  if (!empty($default_displays['video__preview__media_vimeo_image'])) {
    $default_displays['video__preview__media_vimeo_image']->settings['image_style'] = 'panopoly_image_thumbnail';
  }
}

/**
 * Implementation of hook_file_type_alter()
 *
 * Alters list of file types that can be assigned to a file.
 */
function my_pane_file_type_alter(&$types, $file) {
  if ($file->filemime == 'video/youtube' || $file->filemime == 'video/vimeo') {
    $types[] = 'video';
  }
}

/**
 * Implements hook_menu_block_tree_alter().
 *
 * Updates menu block settings in case of IPE callback magic. This will only
 * work in limited cases but will be fixed when the page refreshes.
 */
function my_pane_menu_block_tree_alter($tree, $config) {
  if (arg(0) == 'panels' && arg(1) == 'ajax') {
    foreach ($tree as $key => $value) {
      $tree[$key]['link']['in_active_trail'] = TRUE;
    }
  }
}

/**
 * Rewrites the node title by poisening the node_load() static cache.
 *
 * We use this to support overriding the title of 'Content item' widgets.
 * Unfortunately, we can't hook into a spot between when the View loads the
 * entity and Panelizer renders it, so we have to use this hack.
 *
 * @param int $nid
 *   The NID of the node whose title we're going to rewrite.
 * @param string|NULL $title
 *   (optional) If a string is given, the this is the new title for the node.
 *   If NULL is given, return the title to its previous value.
 *
 * @see my_pane_views_post_execute()
 * @see my_pane_views_post_render()
 */
function _my_pane_content_item_title_rewrite($nid, $title = NULL) {
  static $saved_title = array();

  $node = node_load($nid);

  if (!is_null($title)) {
    $saved_title[$nid] = $node->title;
    $node->title = $title;
  }
  elseif (isset($saved_title[$nid])) {
    $node->title = $saved_title[$nid];
  }
}

/**
 * Determines if the given view mode on this node shows the title.
 *
 * @param object $node
 *   The fully loaded node object to check.
 * @param string $view_mode
 *   The view mode.
 *
 * @return boolean
 *   TRUE if the title is shown; FALSE otherwise.
 */
function _my_pane_is_title_shown($node, $view_mode) {
  if (!empty($node->panelizer) && (!empty($node->panelizer[$view_mode]) || !empty($node->panelizer['default']))) {
    $panelizer_display = isset($node->panelizer[$view_mode]) ? $node->panelizer[$view_mode]->display : $node->panelizer['default']->display;
    if (empty($panelizer_display->hide_title) && empty($panelizer_display->pane_title) && strpos($panelizer_display->title, '%node:title') !== FALSE) {
      // We're showing the title via the Panelizer display title.
      return TRUE;
    }
    else {
      foreach ($panelizer_display->content as $pane) {
        if (($pane->type == 'node_title' && $pane->subtype == 'node_title') || ($pane->type == 'token' && $pane->subtype == 'node:title')) {
          // We're showing the node title in a Pane inside the view mode.
          return TRUE;
        }
        elseif ($pane->type == 'node_content' && $pane->subtype == 'node_content') {
          $child_view_mode = $pane->configuration['build_mode'];
          // Prevent endless recursion.
          if ($child_view_mode == $view_mode) {
            if ($child_view_mode != 'full') {
              $child_view_mode = 'full';
            }
            else {
              continue;
            }
          }
          if (_my_pane_is_title_shown($node, $child_view_mode)) {
            return TRUE;
          }
        }
      }

      return FALSE;
    }
  }
  else {
    // If we're not using Panelizer, the theme should always be showing
    // the title when rendering the node.
    return TRUE;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function my_pane_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'my_pane_general_content' && $display_id == 'piece_of_content') {
    // If neither 'nid' or 'title' is set, then don't display anything. This is
    // primarily for the live preview, which would otherwise default to the
    // first node. See issue #2463395.
    if (empty($view->exposed_input) || (empty($view->exposed_input['nid']) && empty($view->exposed_input['title']))) {
      $view->executed = TRUE;
    }
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function my_pane_views_default_views_alter(&$views) {
  // If the locale module is enabled, ensure the "Add content item" widget's
  // View will respect current language settings for the content.
  if (module_exists('locale') && array_key_exists('my_pane_general_content', $views)) {
    /** @var views_display $piece_of_content */
    $piece_of_content =& $views['my_pane_general_content']->display['piece_of_content'];

    $piece_of_content->handler->display->display_options['filters']['language']['id'] = 'language';
    $piece_of_content->handler->display->display_options['filters']['language']['table'] = 'node';
    $piece_of_content->handler->display->display_options['filters']['language']['field'] = 'language';
    $piece_of_content->handler->display->display_options['filters']['language']['value'] = array(
      '***CURRENT_LANGUAGE***' => '***CURRENT_LANGUAGE***',
      'und' => 'und',
    );
  }
}

/**
 * Implements hook_views_post_execute().
 */
function my_pane_views_post_execute(&$view) {
  if ($view->name == 'my_pane_general_content' && $view->current_display == 'piece_of_content') {
    $display =& $view->display[$view->current_display];
    $row_plugin = $view->style_plugin->row_plugin;

    // If we are rendering the actual node, rather than showing fields or a
    // table, then we need to move the title override to the node itself.
    if (is_a($row_plugin, 'entity_views_plugin_row_entity_view')) {
      $nid = $view->result[0]->nid;
      $overridden_title = $display->handler->options['title'];
      if (!empty($overridden_title)) {
        _my_pane_content_item_title_rewrite($nid, $overridden_title);


        $hide_pane_title = FALSE;

        // Attempt to determine if the node title is being shown in the view
        // mode, so that we can hide the pane title and avoid showing it twice.
        $node = node_load($nid);
        if (_my_pane_is_title_shown($node, $row_plugin->options['view_mode'])) {
          unset($display->handler->options['title']);
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function my_pane_views_post_render(&$view) {
  if ($view->name == 'my_pane_general_content' && $view->current_display == 'piece_of_content') {
    // Reset the title to its original value.
    $display = $view->display[$view->current_display];
    if (is_a($view->style_plugin->row_plugin, 'entity_views_plugin_row_entity_view')) {
      _my_pane_content_item_title_rewrite($view->result[0]->nid);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function my_pane_form_views_content_views_panes_content_type_edit_form_alter(&$form, &$form_state) {
  $view = $form_state['view'];
  if ($view->name == 'my_pane_general_content' && $view->current_display == 'piece_of_content') {
    $exposed =& $form['exposed'];

    // Set required on the form rather than the View because we need to allow
    // either 'title' or 'nid' when actually rendering the View.
    $exposed['filter-title']['#required'] = TRUE;
    $exposed['filter-title']['title']['#required'] = TRUE;

    // If the user updated my_pane, but hasn't run the update function
    // panopoly_wigets_update_7012() yet, then bail out because this code can
    // actually break this widget entirely.
    if (empty($exposed['filter-nid'])) {
      return;
    }

    // If we have a value for NID, then we use that to set the title and then
    // clear out and hide the NID. This allows the user to chose the node using
    // the title autocomplete.
    if (!empty($exposed['filter-nid']['nid']['#default_value'])) {
      if ($node = node_load($exposed['filter-nid']['nid']['#default_value'])) {
        $form_state['original_nid'] = $node->nid;
        $form_state['original_title'] = $node->title;
        $exposed['filter-title']['title']['#default_value'] = $node->title;
      }
    }
    $exposed['filter-nid']['nid']['#default_value'] = '';
    $exposed['filter-nid']['#access'] = FALSE;

    // Add a submit callback that will convert back from the title to the NID.
    array_unshift($form['#submit'], '_my_pane_content_item_form_submit');
  }
}

/**
 * Submission callback for 'Content Item' widget's exposed form.
 */
function _my_pane_content_item_form_submit($form, &$form_state) {
  $exposed =& $form_state['values']['exposed'];
  if ($exposed['title'] != $form_state['original_title']) {
    // If the title has changed, we need to load the node with that title, set
    // the NID, and then clear out the title. We use the View itself to query
    // so that the result is consistent with autocomplete.
    $view = views_get_view('my_pane_general_content');
    $view->set_display('piece_of_content');
    $view->set_exposed_input($exposed);
    $view->pre_execute();
    $view->execute($view->current_display);
    $view->post_execute();
    if (count($view->result) > 0) {
      $exposed['nid'] = $view->result[0]->nid;
      $exposed['title'] = '';
    }
  }
  else {
    // If the title hasn't change, we just revert back to the original NID.
    $exposed['nid'] = $form_state['original_nid'];
    $exposed['title'] = '';
  }
}


/*
 * Implementing hook_menu()
 */
function my_pane_menu() {

  $items['ajax_complex_calender'] = array(
    'title' => '',
    'access arguments' => array('access content'),
    'page callback' => 'ajax_complex_calender_filter',
    );
  
    $items['ajax_complex_calender_mobile'] = array(
    'title' => '',
    'access arguments' => array('access content'),
    'page callback' => 'ajax_complex_calender_mobile_filter',
    );
    
    return $items;
}

function _weight_indicator_sort($a, $b) {
  return $a->weight - $b->weight;
}

/*
 * custom block " Complex Calender View Block " callback
 */
function complex_calender_view_block_content(){
    global $language ;
    $lang_name = isset($language->language) ? $language->language : '';
    if($lang_name == ''){
        $lang_name = 'en';
    }
    global $base_url;
    $output = $filter = $selected_filter = $day = "";
    $term_page = arg(0);
    if($term_page == 'taxonomy'){
        $tid =arg(2);
        $texonomy = taxonomy_term_load($tid);     
        $start_date = isset($texonomy->field_cm_festival_date['und'][0]['value']) ? $texonomy->field_cm_festival_date['und'][0]['value'] : '';
        $end_date = isset($texonomy->field_cm_festival_date['und'][0]['value2']) ? $texonomy->field_cm_festival_date['und'][0]['value2'] : '';
        $start_date = strtotime($start_date);
        $end_date = strtotime($end_date);
        if(!empty($start_date)){
            $day = date( 'Y-m-d', $start_date );
        }
        $filter.= " <div class ='calender-filter'>" ;
        $filter.= " <span class ='prevday filter-cantrol' ><i class='fa fa-angle-left '></i></span>" ;
        if(!empty($end_date) && !empty($start_date)){
             $a = 1; $filter_class = '';
             if($a == '1'){ $filter_class = 'active';}
            for ( $i = $start_date; $i <= $end_date; $i = $i + 86400 ) {
                   $Date = date( 'j.n', $i ); 
                   $Day = date( 'l', $i );
                   $filter.="<p class='$filter_class'>$Date<br /><span>$Day</span><span class='filter-date element-invisible'>$i</span></p>";
                   $a++;
                   $filter_class  = '';
            }
        }else{
                drupal_set_message('Start date and End date are not set in texonomy term', $type = 'error');
         }
         $filter.= " <span class ='nextday filter-cantrol'><i class='fa fa-angle-right'></i></span>" ;
        $filter.= " </div>" ;
        
        if(!empty($start_date)){
            $selected_filter = date( 'l | d.m.y', $start_date );
        }
    }else{
          if(!empty(arg(1))){
            $node = node_load(arg(1));
            if(!empty($node)){
                global $_domain;
                $domains = $node->domains;
               foreach($domains as $domain){
                    if($_domain['domain_id'] == $domain){
                        $term_tid = db_query("SELECT `entity_id` FROM `field_data_field_cm_domain` WHERE `field_cm_domain_value` =$domain")->fetchField();
                        break;
                    }
                }
                if($term_tid != ''){
                    $texonomy = taxonomy_term_load($term_tid);
                    
                    $start_date = isset($texonomy->field_cm_festival_date['und'][0]['value']) ? $texonomy->field_cm_festival_date['und'][0]['value'] : '';
                    $end_date = isset($texonomy->field_cm_festival_date['und'][0]['value2']) ? $texonomy->field_cm_festival_date['und'][0]['value2'] : '';  
                    if(!empty($start_date)){
                       $start_date = strtotime($start_date);
                    }
                    if(!empty($end_date)){
                       $end_date = strtotime($end_date);
                    }
                    if(!empty($start_date)){
                        $day = date( 'Y-m-d', $start_date );
                    }
                    $filter.= " <div class ='calender-filter'>" ;
                    $filter.= " <span class ='prevday filter-cantrol' ><i class='fa fa-angle-left '></i></span>" ;
                    if(!empty($end_date) && !empty($start_date)){
                        $a = 1; $filter_class = '';
                        for ( $i = $start_date; $i <= $end_date; $i = $i + 86400 ) {
                            if($a == '1'){ $filter_class = 'active';}
                               $Date = date( 'j.n', $i ); 
                               $Day = date( 'l', $i );
                               $filter.="<p class='$filter_class'>$Date<br /><span>$Day</span><span class='filter-date element-invisible'>$i</span></p>";
                               $a++;
                               $filter_class  = '';
                        }
                    }else{
                                drupal_set_message('Start date and End date are not set in texonomy term', $type = 'error');
                     }
                     $filter.= " <span class ='nextday filter-cantrol'><i class='fa fa-angle-right'></i></span>" ;
                    $filter.= " </div>" ;

                    if(!empty($start_date)){
                        $selected_filter = date( 'l | d.m.y', $start_date );
                    }
                }else{
                    drupal_set_message('Current domain or node not connected to texonomy term', $type = 'status');
                }
            }
        }else{
          return;
        }
    }

      $result =  db_query("SELECT  flagging_node.uid AS flagged_user,n.nid AS nid, n.title, n.created, event_subtitle.field_cm_event_subtitle_value AS event_subtitle,
              event_time.field_cm_event_time_value AS event_start_time, event_time.field_cm_event_time_value2 AS event_end_time, event_duration.field_cm_event_duration_interval AS event_duration,
              event_internal_id.field_cm_event_internal_id_value AS event_internal_id, event_hall.field_cm_event_hall_target_id AS hall_tid, event_body.field_cm_event_body_value AS event_body,
              toptix_purchase.field_toptix_purchase_value As toptix_purchases, short_title.field_cm_event_short_title_value As short_title, event_comment.field_cm_event_comment_value As event_comment
              FROM node AS n 
              LEFT JOIN flagging As flagging_node ON n.nid = flagging_node.entity_id AND flagging_node.fid = '1'
              LEFT JOIN field_data_field_cm_event_short_title AS short_title ON n.nid = short_title.entity_id
              LEFT JOIN field_data_field_cm_event_subtitle AS event_subtitle ON n.nid = event_subtitle.entity_id
              LEFT JOIN field_data_field_cm_event_time  AS event_time ON n.nid = event_time.entity_id
              LEFT JOIN field_data_field_cm_event_duration  AS event_duration  ON n.nid = event_duration.entity_id
              LEFT JOIN field_data_field_cm_event_internal_id  AS event_internal_id  ON n.nid = event_internal_id.entity_id
              LEFT JOIN field_data_field_cm_event_body As event_body ON n.nid = event_body.entity_id
              LEFT JOIN field_data_field_cm_event_hall As event_hall ON n.nid = event_hall.entity_id
              LEFT JOIN field_data_field_toptix_purchase As toptix_purchase ON n.nid = toptix_purchase.entity_id
              LEFT JOIN field_data_field_cm_event_comment As event_comment ON n.nid = event_comment.entity_id
              WHERE ((n.type = 'cm_event')) and ((n.language = '$lang_name')) and  ((n.status = '1'))  and ( (DATE_FORMAT(ADDTIME(FROM_UNIXTIME(event_time.field_cm_event_time_value2), SEC_TO_TIME(10800)), '%Y-%m-%d') >= '$day' AND DATE_FORMAT(ADDTIME(FROM_UNIXTIME(event_time.field_cm_event_time_value), SEC_TO_TIME(10800)), '%Y-%m-%d') <= '$day') )
              ORDER BY event_start_time ASC")->fetchAll();
    $result_count = count($result);
    $term_array = array();
    $hall = array();
    $html = '';
    foreach($result as $val){
      if($val->hall_tid) {
		$term_array[] = $val->hall_tid;
        $start_time = $val->event_start_time;
        $event_time = date('G',$start_time);
        $hall[$event_time][] = $val;
	  }
    }
     ksort($hall);  
     $all_term = array_unique($term_array); 
     $output.="<div class='col-sm-12 calender'>";
     $output.= $filter;
     $output.="<div class='ajax-inner'>";
      $output.="<div class='scroll-date'><div class='wrapper'><div class='calender-filter-date col-sm-12'><p class='pull-left'>$selected_filter</p></div>";
      $output.="<div class='calender-scroll'>";
	  $output.= "<p class='inactive scrollleft'><</p>";
	  $output.= "<span>";
      $output.= t("Other venues");
      $output.="</span>";
      $output.="<p class='scrollright'>></p>
                          </div></div></div>";
     $output.="<div class='calender-header'><p class='calendar-dayview-hour'></p>";
	 $halls_inorder = array();
	 
	 foreach($all_term as $tid){
        $term_load = taxonomy_term_load($tid);
		$halls_inorder[$term_load->tid] =$term_load;
     }
	 //dpm($halls_inorder);
	 //uasort($halls_inorder, 'drupal_sort_weight');
	 uasort($halls_inorder, '_weight_indicator_sort');
	 //dpm($halls_inorder);	
	 //dpm($all_term);	 
     foreach($halls_inorder as $tid => $term){
         $output.=" <p class='calendar-agenda-items'>$term->name</p>";
     }
    $output.="</div><div  class='calender-body'>";
    $timearray = array('8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24');
    foreach($timearray as $vtime){
        $num = 1;
        foreach($hall as $key => $cell){
            $key = trim($key);
            $calender = array();
            $extravtime = $vtime + 1;
            if($key == $vtime && $key < $extravtime){
                $num++;
                if(!empty($key)){
                   $start_time_key = $key;
                   if($start_time_key == '0:00'){
                        $start_time_key = '12:00';
                    }
                }
                 $html.="<div class='calender-full-row'>
                                           <div class='custom-row calender-row '><span class='bold time'>$vtime:00</span></div>";
                 foreach($cell as $val){
                    $nid = $val->nid;
                    $start = $val->event_start_time;
                    $short_date = $short_day = "";
                    if(!empty($start)){
                        $start_time = date('G:i',$start);
                         $short_date= date('d.m.y',$start);
                         $short_day= date('l',$start);
                    }if($start_time == '0:00'){
                        $start_time = '12:00';
                    }
                    $alias = drupal_get_path_alias("node/$nid");
                    if(empty($alias)){
                        $alias = "node/$nid";
                    }
                    $term = taxonomy_term_load($val->hall_tid);
                    $event_duration = $val->event_duration;
                    $lenght = $total_lenght='';
                    if(!empty($event_duration)){
                        $minutes = ' | '.$val->event_duration.' minutes';
                        if(!empty($val->event_duration)){
                           $lenght = $val->event_duration/60;
                           if($lenght == 2){ $length_padding =12;}
                           elseif($lenght == 3){ $length_padding =20;}
                           elseif($lenght == 4){ $length_padding =30;}
                           elseif($lenght == 5){ $length_padding =40;}
                           elseif($lenght == 6){ $length_padding =50;}
                           elseif($lenght == 7){ $length_padding =60;}
                           elseif($lenght == 8){ $length_padding =70;}
                           elseif($lenght == 9){ $length_padding =80;}
                           elseif($lenght == 10){ $length_padding =90;}
                           elseif($lenght == 11){ $length_padding =100;}
                          elseif($lenght == 12){ $length_padding =110;}
                          elseif($lenght == 13){ $length_padding =120;}
                          elseif($lenght == 14){ $length_padding =130;}
                          elseif($lenght == 15){ $length_padding =140;}
                          elseif($lenght == 16){ $length_padding =150;}   
                          elseif($lenght == 17){ $length_padding =160;}                          
                          else{ $length_padding = 0; }
                           $total_lenght = $lenght*150+$length_padding;
                        }
                    }else{
                        $minutes ='';
                    }
                    $event_margin = 0;
                    $mid_hour_start= date('i',$start);
                    if($mid_hour_start != '00'){
                        $event_diff = 60/$mid_hour_start;
                        $event_margin = 150/$event_diff;
                    }
                    $flag = flag_create_link('favorite_', $nid);
                    $string =  substr($val->event_body,0,500).'...';
                    $string = strip_tags($string);
                   $event_interanl_id ='';
                    if(!empty($val->event_internal_id)){
                        $event_interanl_id = $val->event_internal_id;
                    }
                    $toptix_purchases = '';
                    if(!empty($val->toptix_purchases)){
                            $node = node_load($nid);
                            $items = isset($node->field_toptix_purchase['und']) ? $node->field_toptix_purchase['und'] : array();
                            $the_field = cinematic_toptix_field_formatter_view('node', $node, 'field_toptix_purchase', '', 'en', $items, array('type' => 'toptix_purchase'));
                           $toptix_purchases = drupal_render($the_field);
                    }
                   if(!empty($val->short_title)){
                        $title = $val->short_title;
                    }else{
                        $title = $val->title;
                    }
                    
                    $calender[$val->hall_tid] = "<div class='calender-row custom-row'>
                                                   <div class = 'calender-row inner' style='height:".$total_lenght."px;position: absolute;min-height:150px;margin-top:".$event_margin."px;'>
                                                        $flag
                                                        <div class='time'><span class='bold'>$start_time</span> $minutes</div>
                                                        <div class='title'><span class='bold'>$title</span> </div>
                                                        <div class='subtitle'><span>$val->event_subtitle</span> </div>
                                                        <div class='comment'><span>$val->event_comment</span></div>
                                                        <div class='internal-id'><span>$event_interanl_id</span> </div>
                                                        <div class='tickets'>$toptix_purchases</div>
                                                        <div class='element-invisible'><span>$term->name</span></div>
                                                   </div>
 
                                                  <div class='calender-popup'>
                                                  <a href='javascript:void(0)' onclick = 'closed();'><img class='close-calender-popup' src='/sites/all/themes/cinemateque/images/close.png'/></a>
                                                       <div class = 'calender-row inner'>
                                                       <div class='title'><span class='bold'>$title</span> </div>
                                                       <div class='body'>$string </div>
                                                       ".l(t('To event page'),'node/'.$nid,array('attributes' => array('class' => array('read-more'))))."
                                                       <div class='tickets'><span>$short_day</span><span>$short_date</span><span>$start_time</span><span>$term->name</span>$toptix_purchases</div>
                                                       </div>
                                                   </div>
                                             </div>";

                }
                foreach($halls_inorder as $tid => $term)  {
                    $a = '0';
                    foreach($calender as $cal_key => $cal_val){
                        if($cal_key == $tid){
                            $html.=$cal_val;
                            $a++;
                        }
                    }
                     if($a == '0'){
                            $html.="<div class='calender-row custom-row '></div>";
                     }
                } 
                 $html.="</div>";
            }
          
        }

        if($num == 1){
            $html.="<div class='calender-full-row'>
                                           <div class='custom-row calender-row '><span class='bold time'>$vtime:00</span></div>";
             foreach($all_term as $tid)  {
                    $html.="<div class='calender-row custom-row '></div>";
             }
                $html.="</div>";
        }

    }
    $output.= $html;
     $output.= "</div></div></div>";
     
        /**
    * mobile calender view
    */  
     $output.="<div class='mobile-calender'>";
     $output.=$filter;
      $output.="<div class='mobile-calender-inner'>";
     $output.="<div class='mobile-calender-filter-date col-sm-12'><p class='pull-left'>$selected_filter</p></div>";
     $output.="<div  class='mobile-calender-body'>";
    $calender = array();
     foreach($hall as $key => $cell){
        if(!empty($key)){
           $start_time_key = $key;
           if($start_time_key == '0:00'){
                $start_time_key = '12:00';
            }
        }

         foreach($cell as $val){
            $nid = $val->nid;
            $start = $val->event_start_time;
            $short_date = $short_day = "";
            if(!empty($start)){
                $start_time = date('G:i',$start);
                 $short_date= date('d.m.y',$start);
                 $short_day= date('l',$start);
            }if($start_time == '0:00'){
                $start_time = '12:00';
            }
			/*
            $alias = drupal_get_path_alias("node/$nid");
            if(empty($alias)){
                $alias = "node/$nid";
            }*/
            $event_duration = $val->event_duration;
            if(!empty($event_duration)){
                $minutes = ' | '.$val->event_duration.' minutes';
            }else{
                $minutes ='';
            }
            $calender[$val->hall_tid][] = "<div class='mobile-calender-row mobile-custom-row'>
                                                <div class='mobile-bold-time'>$start_time_key</div>
                                                <div class='mobile-event-title'>$val->title</div>
                                                <div class='mobile-event-tickets'>".l(t('Tickets'),'node/'.$nid)."</div>
                                     </div>";
           
        }
     }

      foreach($all_term as $tid)  {
          $term = taxonomy_term_load($tid);
          $output.="<div class='mobile-event-accordian'><p class='accordian-hall'>$term->name<i class='fa fa-angle-right'></i></p>";
          $output.="<div class='mobile-accordian-content'>";
            foreach($calender as $cal_key => $cal_val){
                if($cal_key == $tid){
                     foreach($cal_val as  $event_val){
                         $output.=$event_val;
                     }
                }
            }
            $output.="</div></div>";
        } 
     $output.="</div></div></div>";
     
     return $output;
}

/**
 * Ajax filteration of complex calender
 */
function ajax_complex_calender_filter(){
    
    global $language ;
    $lang_name = isset($language->language) ? $language->language : '';
    if($lang_name == ''){
        $lang_name = 'en';
    }
    $filterdate = $_POST['filterdate'];
    $day = date( 'Y-m-d', $filterdate );
     global $base_url;
    $output = $selected_filter = "";
    if(!empty($filterdate)){
            $selected_filter = date( 'l | d.m.y', $filterdate );
    }
      $result =  db_query("SELECT  flagging_node.uid AS flagged_user,n.nid AS nid, n.title, n.created, event_subtitle.field_cm_event_subtitle_value AS event_subtitle,
              event_time.field_cm_event_time_value AS event_start_time, event_time.field_cm_event_time_value2 AS event_end_time, event_duration.field_cm_event_duration_interval AS event_duration,
              event_internal_id.field_cm_event_internal_id_value AS event_internal_id, event_hall.field_cm_event_hall_target_id AS hall_tid, event_body.field_cm_event_body_value AS event_body,
              toptix_purchase.field_toptix_purchase_value As toptix_purchases, short_title.field_cm_event_short_title_value As short_title, event_comment.field_cm_event_comment_value As event_comment
              FROM node AS n 
              LEFT JOIN flagging As flagging_node ON n.nid = flagging_node.entity_id AND flagging_node.fid = '1'
              LEFT JOIN field_data_field_cm_event_short_title AS short_title ON n.nid = short_title.entity_id
              LEFT JOIN field_data_field_cm_event_subtitle AS event_subtitle ON n.nid = event_subtitle.entity_id
              LEFT JOIN field_data_field_cm_event_time  AS event_time ON n.nid = event_time.entity_id
              LEFT JOIN field_data_field_cm_event_duration  AS event_duration  ON n.nid = event_duration.entity_id
              LEFT JOIN field_data_field_cm_event_internal_id  AS event_internal_id  ON n.nid = event_internal_id.entity_id
              LEFT JOIN field_data_field_cm_event_body As event_body ON n.nid = event_body.entity_id
              LEFT JOIN field_data_field_cm_event_hall As event_hall ON n.nid = event_hall.entity_id
              LEFT JOIN field_data_field_toptix_purchase As toptix_purchase ON n.nid = toptix_purchase.entity_id
              LEFT JOIN field_data_field_cm_event_comment As event_comment ON n.nid = event_comment.entity_id
              WHERE ((n.type = 'cm_event' )) and ((n.language = '$lang_name')) and  ((n.status = '1'))  and ( (DATE_FORMAT(ADDTIME(FROM_UNIXTIME(event_time.field_cm_event_time_value2), SEC_TO_TIME(10800)), '%Y-%m-%d') >= '$day' AND DATE_FORMAT(ADDTIME(FROM_UNIXTIME(event_time.field_cm_event_time_value), SEC_TO_TIME(10800)), '%Y-%m-%d') <= '$day') )
              ORDER BY event_start_time ASC")->fetchAll();
    $result_count = count($result);
    $term_array = array();
    $hall = array();
    $html ='';
     foreach($result as $val){
         $term_array[] = $val->hall_tid;
         $start_time = $val->event_start_time;
         $event_time = date('G',$start_time);
         $hall[$event_time][] = $val;
     }
     $all_term = array_unique($term_array); 
     $output.="<div class='ajax-inner'>";
      $output.="<div class='scroll-date'><div class='wrapper'><div class='calender-filter-date col-sm-12'><p class='pull-left'>$selected_filter</p></div>";
      $output.="<div class='calender-scroll'>";
	  $output.= "<p class='inactive scrollleft'><</p>";
	  $output.= "<span>";
      $output.= t("Other venues");
      $output.="</span>";
      $output.="<p class='scrollright'>></p>
                          </div></div></div>";
     $output.="<div class='calender-header'><p class='calendar-dayview-hour col-sm-2'></p>";
     foreach($all_term as $tid){
         $term_load = taxonomy_term_load($tid);
         $output.=" <p class='calendar-agenda-items'>$term_load->name</p>";
     }
    $output.="</div><div  class='calender-body'>";
    ksort($hall);    
    $timearray = array('8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24');
    foreach($timearray as $vtime){
        $num = 1;
        foreach($hall as $key => $cell){
            $key = trim($key);
            $extravtime = $vtime + 1;
            if($key == $vtime && $key < $extravtime){
                $num++;
                if(!empty($key)){
                   $start_time_key = $key;
                   if($start_time_key == '0:00'){
                        $start_time_key = '12:00';
                    }
                }
                 $html.="<div class='calender-full-row'>
                                           <div class='custom-row calender-row '><span class='bold time'>$vtime:00</span></div>";
                 $calender = array();
                 foreach($cell as $val){
                    $nid = $val->nid;
                    $start = $val->event_start_time;
                    $short_date = $short_day = "";
                    if(!empty($start)){
                        $start_time = date('G:i',$start);
                         $short_date= date('d.m.y',$start);
                         $short_day= date('l',$start);
                    }if($start_time == '0:00'){
                        $start_time = '12:00';
                    }
                    $alias = drupal_get_path_alias("node/$nid");
                    if(empty($alias)){
                        $alias = "node/$nid";
                    }
                    $term = taxonomy_term_load($val->hall_tid);
                    $event_duration = $val->event_duration;
                    $lenght = $total_lenght='';
                    if(!empty($event_duration)){
                        $minutes = ' | '.$val->event_duration.' minutes';
                        if(!empty($val->event_duration)){
                           $lenght = $val->event_duration/60;
                           if($lenght == 2){ $length_padding =12;}
                           elseif($lenght == 3){ $length_padding =20;}
                           elseif($lenght == 4){ $length_padding =30;}
                           elseif($lenght == 5){ $length_padding =40;}
                           elseif($lenght == 6){ $length_padding =50;}
                           elseif($lenght == 7){ $length_padding =60;}
                           elseif($lenght == 8){ $length_padding =70;}
                           elseif($lenght == 9){ $length_padding =80;}
                           elseif($lenght == 10){ $length_padding =90;}
                           elseif($lenght == 11){ $length_padding =100;}
                          elseif($lenght == 12){ $length_padding =110;}
                          elseif($lenght == 13){ $length_padding =120;}
                          elseif($lenght == 14){ $length_padding =130;}
                          elseif($lenght == 15){ $length_padding =140;}
                          elseif($lenght == 16){ $length_padding =150;}   
                          elseif($lenght == 17){ $length_padding =160;}                            
                          else{ $length_padding = 0; }
                           $total_lenght = $lenght*150+$length_padding;
                        }
                    }else{
                        $minutes ='';
                    }
                    $event_margin = 0;
                    $mid_hour_start= date('i',$start);
                    if($mid_hour_start != '00'){
                        $event_diff = 60/$mid_hour_start;
                        $event_margin = 150/$event_diff;
                    }                    
                    $flag = flag_create_link('favorite_', $nid);
                    $string =  substr($val->event_body,0,500).'...';
                    $string = strip_tags($string);
                    $event_interanl_id ='';
                    if(!empty($val->event_internal_id)){
                        $event_interanl_id = $val->event_internal_id;
                    }
                   $toptix_purchases = '';
                    if(!empty($val->toptix_purchases)){
                            $node = node_load($nid);
                            $items = isset($node->field_toptix_purchase['und']) ? $node->field_toptix_purchase['und'] : array();
                            $the_field = cinematic_toptix_field_formatter_view('node', $node, 'field_toptix_purchase', '', 'en', $items, array('type' => 'toptix_purchase'));
                           $toptix_purchases = drupal_render($the_field);
                    }   
                    if(!empty($val->short_title)){
                        $title = $val->short_title;
                    }else{
                        $title = $val->title;
                    }                        
                    $calender[$val->hall_tid] = "<div class='calender-row custom-row'>
                                                   <div class = 'calender-row inner' style='height:".$total_lenght."px;position: absolute;min-height:150px;margin-top:".$event_margin."px;'>
                                                        $flag
                                                        <div class='time'><span class='bold'>$start_time</span> $minutes</div>
                                                        <div class='title'><span class='bold'>$title</span> </div>
                                                        <div class='subtitle'><span>$val->event_subtitle</span> </div>
                                                        <div class='comment'><span>$val->event_comment</span></div>
                                                        <div class='internal-id'><span>$event_interanl_id</span> </div>
                                                        <div class='tickets'>$toptix_purchases</div>
                                                        <div class='element-invisible'><span>$term->name</span></div>
                                                   </div>
 
                                                  <div class='calender-popup'>
                                                  <a href='javascript:void(0)' onclick = 'closed();'><img class='close-calender-popup' src='/sites/all/themes/cinemateque/images/close.png'/></a>
                                                       <div class = 'calender-row inner'>
                                                       <div class='title'><span class='bold'>$title</span> </div>
                                                       <div class='body'>$string </div>
                                                       <a href='$base_url/$alias' class='read-more'>To event page  > </a>
                                                       <div class='tickets'><span>$short_day</span><span>$short_date</span><span>$start_time</span><span>$term->name</span>$toptix_purchases</div>
                                                       </div>
                                                   </div>
                                             </div>";

                }
                foreach($all_term as $tid)  {
                    $a = '0';
                    foreach($calender as $cal_key => $cal_val){
                        if($cal_key == $tid){
                            $html.=$cal_val;
                            $a++;
                        }
                    }
                     if($a == '0'){
                            $html.="<div class='calender-row custom-row '></div>";
                     }
                } 
                 $html.="</div>";
            }
          
        }

        if($num == 1){
            $html.="<div class='calender-full-row'>
                                           <div class='custom-row calender-row '><span class='bold time'>$vtime:00</span></div>";
             foreach($all_term as $tid)  {
                    $html.="<div class='calender-row custom-row '></div>";
             }
                $html.="</div>";
        }

    }
    $output.=$html;
    $output.= "</div></div>";
    drupal_json_output(array('output' => $output));
}

/**
 * Ajax filteration of mobile complex calender
 */
function ajax_complex_calender_mobile_filter(){
    
    $filterdate = $_POST['filterdate'];
    $day = date( 'Y-m-d', $filterdate );
     global $base_url;
    $output = $selected_filter = "";
    if(!empty($filterdate)){
            $selected_filter = date( 'l | d.m.y', $filterdate );
    }
      $result =  db_query("SELECT  flagging_node.uid AS flagged_user,n.nid AS nid, n.title, n.created, event_subtitle.field_cm_event_subtitle_value AS event_subtitle,
              event_time.field_cm_event_time_value AS event_start_time, event_time.field_cm_event_time_value2 AS event_end_time, event_duration.field_cm_event_duration_interval AS event_duration,
              event_internal_id.field_cm_event_internal_id_value AS event_internal_id, event_hall.field_cm_event_hall_target_id AS hall_tid, event_body.field_cm_event_body_value AS event_body,
              short_title.field_cm_event_short_title_value As short_title
              FROM node AS n 
              LEFT JOIN flagging As flagging_node ON n.nid = flagging_node.entity_id AND flagging_node.fid = '1'
              LEFT JOIN field_data_field_cm_event_short_title AS short_title ON n.nid = short_title.entity_id
              LEFT JOIN field_data_field_cm_event_subtitle AS event_subtitle ON n.nid = event_subtitle.entity_id
              LEFT JOIN field_data_field_cm_event_time  AS event_time ON n.nid = event_time.entity_id
              LEFT JOIN field_data_field_cm_event_duration  AS event_duration  ON n.nid = event_duration.entity_id
              LEFT JOIN field_data_field_cm_event_internal_id  AS event_internal_id  ON n.nid = event_internal_id.entity_id
              LEFT JOIN field_data_field_cm_event_body As event_body ON n.nid = event_body.entity_id
              LEFT JOIN field_data_field_cm_event_hall As event_hall ON n.nid = event_hall.entity_id
              WHERE ((n.type = 'cm_event' ))and  ((n.status = '1'))  and ( (DATE_FORMAT(ADDTIME(FROM_UNIXTIME(event_time.field_cm_event_time_value2), SEC_TO_TIME(10800)), '%Y-%m-%d') >= '$day' AND DATE_FORMAT(ADDTIME(FROM_UNIXTIME(event_time.field_cm_event_time_value), SEC_TO_TIME(10800)), '%Y-%m-%d') <= '$day') )
              ORDER BY event_start_time ASC")->fetchAll();
    $result_count = count($result);
    $term_array = array();
    $hall = array();
     foreach($result as $val){
         $term_array[] = $val->hall_tid;
         $start_time = $val->event_start_time;
         $event_time = date('G:i',$start_time);
         $hall[$event_time][] = $val;
     }
     $all_term = array_unique($term_array); 
   /**
    * mobile calender view
    */  
     $output.="<div class='mobile-calender-inner'>";
     $output.="<div class='mobile-calender-filter-date col-sm-12'><p class='pull-left'>$selected_filter</p></div>";
     $output.="<div  class='mobile-calender-body'>";
    $calender = array();
     foreach($hall as $key => $cell){
        if(!empty($key)){
           $start_time_key = $key;
           if($start_time_key == '0:00'){
                $start_time_key = '12:00';
            }
        }

         foreach($cell as $val){
            $nid = $val->nid;
            $start = $val->event_start_time;
            $short_date = $short_day = "";
            if(!empty($start)){
                $start_time = date('G:i',$start);
                 $short_date= date('d.m.y',$start);
                 $short_day= date('l',$start);
            }if($start_time == '0:00'){
                $start_time = '12:00';
            }
            $alias = drupal_get_path_alias("node/$nid");
            if(empty($alias)){
                $alias = "node/$nid";
            }
            $event_duration = $val->event_duration;
            if(!empty($event_duration)){
                $minutes = ' | '.$val->event_duration.' minutes';
            }else{
                $minutes ='';
            }
            if(!empty($val->short_title)){
                $title = $val->short_title;
            }else{
                $title = $val->title;
            }              
            $calender[$val->hall_tid][] = "<div class='mobile-calender-row mobile-custom-row'>
                                                <div class='mobile-bold-time'>$start_time_key</div>
                                                <div class='mobile-event-title'>$title</div>
                                                <div class='mobile-event-tickets'><a href='$base_url/$alias'>Tickets</a></div>
                                     </div>";
           
        }
     }
    // echo "<pre>"; print_r($calender); die();
      foreach($all_term as $tid)  {
          $term = taxonomy_term_load($tid);
          $output.="<div class='mobile-event-accordian'><p class='accordian-hall'>$term->name<i class='fa fa-angle-right'></i></p>";
          $output.="<div class='mobile-accordian-content'>";
            foreach($calender as $cal_key => $cal_val){
                if($cal_key == $tid){
                     foreach($cal_val as  $event_val){
                         $output.=$event_val;
                     }
                }
            }
            $output.="</div></div>";
        } 
     $output.="</div></div></div>";
      drupal_json_output(array('output' => $output));
}
