<?php
function my_backend_init() {
    drupal_add_css(drupal_get_path('module', 'my_backend') . '/include/my_backend.css');
    /**
     * External files link
     */
    drupal_add_css('//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css', array('type' => 'external'));
	if(!path_is_admin(current_path())) {
	  drupal_add_css('https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css', array('type' => 'external'));
	}
    
}

/*
 * custom block info
 */
function my_backend_block_info() {

  $blocks = array();

  $blocks['festival_menu_block'] = array(
    'info' => t('festival menu'), 
  );

  return $blocks;
}

/*
 * custom block view
 */
function my_backend_block_view($delta = '') {

    $block = array();

    switch ($delta) {

    case 'festival_menu_block': 
        $block['subject'] = '';
        $block['content'] =custom_festival_menu_block_content();
        break;

    }

  return $block;
}

/*
 * custom block view callback
 */
function custom_festival_menu_block_content(){
	global $_domain;
	if($_domain['domain_id'] == 1) {
		return ;
	}
	
	$term_tid = db_query("SELECT `entity_id` FROM `field_data_field_cm_domain` WHERE `field_cm_domain_value` = :did",array(':did' => $_domain['domain_id']))->fetchField();
    
    $output = "";
    $term_page = arg(0);
    if($term = taxonomy_term_load($term_tid)) {
		$menu = $term->cinematic_menu;
		// texonomy accssociated menu
		if($menu != ''){
		   $menu_source =$menu.'_links_source';
		   $menu_depth = 2;
		  $menu_load =  menu_load($menu);
		  $menu_load_name =$menu_load['title'];
		  $output = menu_tree_output(menu_tree_all_data($menu, null, $menu_depth));
		}
    }
    return $output;
}

/**
 * Implements hook_form_alter().
 */
function my_backend_form_alter(&$form, &$form_state, $form_id) {
  $button_title= isset($form['actions']['submit']['#value']) ? $form['actions']['submit']['#value'] :'send';
  switch($form_id) {
    case 'webform_client_form_19':
       $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => $button_title,
        '#ajax' => array(
          'callback' => 'custom_webform_news_letter_form_js_submit',
          'wrapper' => 'webform-client-form-' . $form['#node']->nid,
          'effect' => 'fade',
        ),
        '#id' => 'edit-submit--' . $form['#node']->nid,
      );
      break;
	case 'cm_movie_node_form':
	$form['#validate'][]='my_backend_cm_movie_node_form_validate';
	break;
	case 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form':
	if (!empty($form['field_which_lobby_to_show_']['und']) && empty($form['field_which_lobby_to_show_']['und']['#default_value'])){
	$tid=split(':', arg(4));
    if (!empty($tid[1]) && $tid[1]=='taxonomy_term') $taxonomy=taxonomy_term_load($tid[2]);
	if (!empty($taxonomy->name)) $form['field_which_lobby_to_show_']['und']['#default_value']=$taxonomy->name;
	}
	break;
  }
}

function custom_webform_news_letter_form_js_submit($form, &$form_state){
  $sid = $form_state['values']['details']['sid'];
   return $form;
}

function my_backend_cm_movie_node_form_validate($form, &$form_state){
	if (!$form_state['values']['field_title_for_indexing']['und'][0]['value']) $form_state['values']['field_title_for_indexing']['und'][0]['value']=$form_state['values']['title'];
}

function my_backend_search_api_query_alter(SearchApiQueryInterface $query) {
  global $user;
  $mySearchid=$query->getOption('search id'); $offset=$query->getOption('offset'); $limit=$query->getOption('limit');
  $query->setOption('search id', $mySearchid.':custom_search');
  $query->setOption('limit', 20000);
  $query->setOption('offset', 0);
  $results=$query->execute();
  $query->setOption('search id', $mySearchid);
  $query->setOption('limit', $limit);
  $query->setOption('offset', $offset);
  $movieArray=$eventArray=array();
  foreach ($results['results'] as $n_id=>$value) {
	  $myNode=node_load($n_id);
	 if ($myNode->type=='cm_movie') $movieArray[$n_id]=$myNode->title;
	 if ($myNode->type=='cm_event') {$eventArray[$n_id]=$myNode->title;
		if($myNode->field_cm_event_time['und'][0]['value'] && $myNode->field_cm_event_time['und'][0]['value']<time()){$query->condition('nid', $n_id, '<>');}
	 } 
	}
  foreach ($eventArray as $del_id=>$del_title) {
	  if (in_array($del_title, $movieArray)) $query->condition('nid', $del_id, '<>');
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function my_backend_preprocess_entity(&$variables) {
if (drupal_is_front_page())
  if ($variables['entity_type']=='paragraphs_item') {
	 if (isset($variables['field_date_expiration'])) { 
	  $x_time = time() >= strtotime ($variables['field_date_expiration'][0]['value'])&& time() <= strtotime ($variables['field_date_expiration'][0]['value2']);
	 }
	else {
		$x_time=false;
	} 
	 if (!$x_time) {
	  $variables['content']=array();
	  $variables['classes_array'][]='estimated';
	 }
  }
}

function my_backend_menu() {

  $items = array();
   //items for autocomplete
   $items['my_backend/autocomplete'] = array(
      'title' => 'Autocomplete for my_backend',
      'page callback' => '_my_backend_autocomplete',
      'access arguments' => array('use autocomplete'),  //or whatever permission makes sense
      'type' => MENU_CALLBACK
    );
  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function my_backend_field_widget_info() {
  $widgets['my_backend_autocomplete'] = array(
    'label' => t('Autocomplete custom'),
    'description' => t('Custom autocomplete text field.'),
    'field types' => array('entityreference'),
    'settings' => array(
      'match_operator' => 'CONTAINS',
      'size' => 60,
      'path' => '',
    ),
  );
  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 */
function my_backend_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {  
      case 'my_backend_autocomplete': 
	  $tags=array();
	  if(!empty($items[$delta]['target_id'])){
	  $tag = i18n_taxonomy_localize_terms(taxonomy_term_load($items[$delta]['target_id']));}  
        $element += array(  
            '#type' => 'textfield',  
            '#title' => $element['#title'],  
            '#default_value' => (!empty($tag->name))?$tag->name.' ('.$tag->tid.')':'',
			'#autocomplete_path' => 'my_backend/autocomplete',
        );
$form['#validate'] = array('101'=>'my_backend_taxonomy_validate');	
      break; 
  }   
  return array('target_id' => $element);
}


/**
 * autocomplete helper
 * $string = string for search
 */
function _my_backend_autocomplete($string) {
  $matches = array();
  $result = db_select('taxonomy_term_data', 'ttd');
  $result->fields('ttd', array('tid', 'name'));
  $result->condition('vid', array('4'), 'IN');
  $query = $result->execute();
  
   foreach ($query as $rows) {
	   $rowe=taxonomy_term_load($rows->tid);
$row = i18n_taxonomy_localize_terms($rowe);	   
    $matches_array[check_plain($row->name).' ('.$row->tid.')'] = check_plain($row->name).' ('.$row->tid.')'; 
  }

  foreach ($matches_array as $row_key=>$row_matches) { 
	if (stripos($row_key, $string) !==false)
    $matches[$row_key] = $row_matches; 
  }
  // Return the result to the form in json
  drupal_json_output($matches);
  exit();
}

function my_backend_taxonomy_validate($form, &$form_state){
	$forms_array=array('field_cm_movie_language', 'field_cm_movie_subtitle');
	foreach ($forms_array as $forms_key=>$forms){
		foreach ($form_state['values'][$forms]['und'] as $tax_key=>$tax_value) {
			if (is_numeric($tax_key) && !empty($tax_value['target_id'])) {
				$tid=my_backend_clear_tid($tax_value['target_id']);
				if (is_numeric($tid)) $form_state['values'][$forms]['und'][$tax_key]['target_id']=$tid;
			}
		}
	}
}

function my_backend_clear_tid($string) {
	$id_array=explode('(', $string);
	$tid=(!empty($id_array[count($id_array)-1]))?str_replace(')','',$id_array[count($id_array)-1]):'';
	return $tid;
}