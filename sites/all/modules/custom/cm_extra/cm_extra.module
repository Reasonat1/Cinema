<?php

function cm_extra_block_info() {
  $blocks['icons'] = array(
    'info' => t('header icons'),
  );
  return $blocks;
}

function cm_extra_block_view($delta = '') {
  $block = array();
  
  switch($delta){
    case 'icons':
      $block = _cm_extra_icons();
      break;

  }
  return $block;	
}

function _cm_extra_icons() {
	//language btn
  if (drupal_multilingual()) {
    $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
    $links = language_negotiation_get_switch_links('language', $path);
	global $language;
  
    if (isset($links->links)) {
	  unset($links->links[$language->language]);
	  if (isset($links->links['en'])) {
		$links->links['en']['title'] = 'E';
		$links->links['en']['attributes']['class'][] = 'lang-en-icon';
	  }
	  if (isset($links->links['he'])) {
		$links->links['he']['title'] = t("He");
		$links->links['he']['attributes']['class'][] = 'lang-he-icon';
	  }
	  //dpm($links);
      drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');
      $class = "language-switcher-{$links->provider}";
      $variables = array('links' => $links->links, 'attributes' => array('class' => array($class)));
      $langicon = theme('links__locale_block', $variables);
      
      //return $block;
    }
  }	
  //cart btn
  $toptixblock = module_invoke('cinematic_toptix', 'block_view', 'cart');
  
  $block['subject'] = '';
  $block['content']['#markup'] = '<li class="popup_search">Search</li>
<li class="shopping-cart"><div class="shopping-cart">'.$toptixblock['content']['#markup'].'</div></li>
<li id="da11y-plugin"></li>
<li>'.$langicon.'</li>
';
  $block['content']['#attached'] = $toptixblock['content']['#attached'];
  $block['content']['#attached']['js'][] = array(
  'type' => 'inline',
  'data' => 'jQuery(document).ready(function () {
        var popup = jQuery(".popup_search").html();
        jQuery(".popup-element-title span").html(popup);
        jQuery(".search_new").appendTo("#search-api-page-search-form");
        jQuery("#search-api-page-search-form").appendTo(".container:first");
    });',
  'scope' => 'footer',
  'group' => JS_THEME,
  'weight' => 9, 
  );
  //dpm($block);
  //dpm(get_defined_vars());
  
  return $block;
  
}

function cm_extra_form_alter(&$form, &$form_state, $form_id) {
	//panels_ipe_edit_control_form or fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form
	//dpm($form_id);
	//dpm($form);
	if($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form') {
		
	  if(empty($form['field_which_lobby_to_show_']['und']['#entity']->field_which_lobby_to_show_)) {
		  //cant work with default pane on term page, but they have link for that on that page.
		  $form['no_reorder'] = array(
			'#type' => 'markup',
			'#markup' => t('To re-order content of this pane, click on the re-order tab link or supply a specific lobby term for this pane.'),
		  );
	  }else{
		$tid = $form['field_which_lobby_to_show_']['und']['#entity']->field_which_lobby_to_show_['und'][0]['tid'];
			
		  // Execute the draggable view.
		  $draggable_view = views_get_view('lobby');
		  $draggable_view->set_display('page_1');
		  $draggable_view->pre_execute(array($tid));
		  $draggable_view->execute('page_1');

		  // Get the markup without the form.
		  $draggable_view_output = (!empty($draggable_view->result) || $draggable_view->style_plugin->even_empty())
			? $draggable_view->style_plugin->render($draggable_view->result) : '';

		  // Get the form in array form (not rendered html). This is needed so we strip the form build id's, and what not, so merging the forms works,
		  // meaning the original form id will be used.
		  $sorter_form = drupal_get_form(views_form_id($draggable_view), $draggable_view, $draggable_view_output);

		  // Strip lots of unnecessary stuff stuff.
		  unset($sorter_form['#action']);
		  unset($sorter_form['#form_id']);
		  unset($sorter_form['#build_id']);
		  unset($sorter_form['#token']);
		  unset($sorter_form['#method']);
		  unset($sorter_form['form_id']);
		  unset($sorter_form['form_token']);
		  unset($sorter_form['form_build_id']);

		  // Change the default draggable_views_submit handler with our own, because it expects a views object argument, which is not properly sent.
		  $sorter_form['actions']['submit']['#submit'][0] = '_cm_extra_custom_draggable_views_submit';

		  // Save the view we will send as an argument, in build_info key.
		  $form_state['build_info']['draggable_views'][$draggable_view->name] = $draggable_view;

		  // Change the save button to the name set in the options, because whenever the view is empty, views sets its own Save label.
			if (isset($reference_design_sorter_view->field['draggableviews']->options['draggableviews']['save_button_label'])) {
			  $label = $reference_design_sorter_view->field['draggableviews']->options['draggableviews']['save_button_label'];

			  // It is important that the label is not one of the labels that are present on node edit page, like Save, Edit, Delete.
			  if (in_array($label, array(t('Save'), t('Edit'), t('Preview'), t('Delete'), t('View Changes')))) {
				$message = t('The draggable views submit label should be set to something other than Save, Edit, or any other button present,\
	 otherwise the node edit page will not work correctly. eg. Save Order. The label can be set in the field settings of the draggable view <a href="!link">here</a>.',
				  array('!link' => url('admin/structure/views/view/' . $reference_design_sorter_view->name)));
				drupal_set_message($message, 'warning');

			  }
			  $sorter_form['actions']['submit']['#value'] = $label;
			}

			// Change the type of the item from 'form' to 'container', so no additional form submit handling is executed besides the main form.
			$sorter_form['#type'] = 'container';

		  // Add the draggable views form elements into the node edit form.
		  $form['ref_design_sorter_wrapper'] = array(
			'#type' => 'fieldset',
			'#title' => t('Content of lobby'),
			'ref_design_sorter' => $sorter_form,
			'#weight' => 100,
		  );

		  // Put it inside the field-group, so we don't clutter the form.
		  if (isset($form['#fieldgroups']['group_references'])) {
			$form['#fieldgroups']['group_references']->children[] = 'ref_design_sorter_wrapper';
			$form['#group_children']['ref_design_sorter_wrapper'] = 'group_references';
		  }
	  
		//dpm($form);
		//dpm($tid);

	  }	
		
	}
}
 
/**
 * Submit handler that prepares a view object to send to the draggable views submit handler.
 *
 * @param $form
 * @param $form_state
 */
function _cm_extra_custom_draggable_views_submit($form, &$form_state) {
  // Get the view object.
  $view_object = current($form_state['build_info']['draggable_views']);

  // Save the original argument, if it exists.
  if (isset($form_state['build_info']['args'][0])) {
    $original_argument = $form_state['build_info']['args'][0];
  }

  // Temporarily set the view object as the new argument, and call the draggable views handler.
  $form_state['build_info']['args'][0] = $view_object;
  draggableviews_views_submit($form, $form_state);

  // Restore original argument, if it existed.
  if (isset($original_argument)) {
    $form_state['build_info']['args'][0] = $original_argument;
  }
}

function cm_extra_form_node_form_alter(&$form, &$form_state, $form_id) {
//dpm($form);
  if(!empty($form['nid']['#value']) && !$form['#node']->tnid){ //only for saved nodes that does not have translation
	  
	$newaction = $form['actions']['submit'];
	$newaction['#submit'][] = 'cm_extra_node_translate_after_submit';
	$newaction['#value'] = t('Save and translate');
	$form['actions']['snt'] = $newaction;
  }

}


function cm_extra_views_post_execute(&$view) {
  if ($view->name != 'user_flagged_content') {
    return;
  }

  $tids = array();
  $nids = array();
  foreach ($view->result as $result_item) {
    foreach ($result_item->field_field_tag as $term) {
      $tid = $term['raw']['tid'];
      $tids[$tid] = TRUE;
    }
    foreach ($result_item->field_field_cm_movie_tags as $term) {
      $tid = $term['raw']['target_id'];
      $tids[$tid] = TRUE;
    }
    foreach ($result_item->field_field_cm_moviegroup_tags as $term) {
      $tid = $term['raw']['target_id'];
      $tids[$tid] = TRUE;
    }
    $nid = $result_item->nid;
    $nids[$nid] = TRUE;
  }
  $tids = implode('+', array_keys($tids));
  $nids = implode('+', array_keys($nids));
  $similar = views_embed_view('similar_user_flagged_content', 'default', $tids, $nids);
  $view->attachment_after = '<h2>similar</h2>' . $similar;
}

//redirect user to the add node form of the translation for it
function cm_extra_views_pre_render(&$view) {
	//hide event title if it equals to movie title
	if($view->name == 'event_ct_view' && $view->current_display == 'panel_pane_3') {
		if(isset($view->result[0]->node_field_data_field_cm_event_lineup_title) && strcmp($view->result[0]->node_title, $view->result[0]->node_field_data_field_cm_event_lineup_title) == 0 ){
			unset($view->result[0]->node_field_data_field_cm_event_lineup_title);
		}
	}
	
	if($view->name == 'event_ct_view' && $view->current_display == 'panel_pane_9') {
		//dpm($view->result);
		/*if(empty($view->result[0]->field_data_field_cm_event_images_field_cm_event_images_fid)) {
			dpm('replace view result');
			dpm($view->result);
			$view->result = views_get_view_result('event_ct_view', 'panel_pane_9', ($view->args[0]));
			dpm($view->result);
			
		}*/
		
	}
}

function cm_extra_node_translate_after_submit($form, &$form_state) {
	$a = $form_state;
	($a['node']->language == 'en') ? $dest_lang = 'he' : $dest_lang = 'en';
	$form_state['redirect'] = array(
	  'node/add/'. str_replace('_', '-', $a['node']->type),
	  array('query' => array(
	    'translation' => $a['node']->nid,
		'target' => $dest_lang,
	    )),
	);
	
}

function cm_extra_field_attach_prepare_translation_alter(&$entity, $context) {
	if (!empty($entity->field_cm_event_lineup['und']) && empty($context['not_new']) && $entity->type=='cm_event') {
		$lineup=node_load($entity->field_cm_event_lineup['und'][0]['target_id']);
		if (!empty($lineup->title) && $lineup->title==$entity->title) {$entity->title='';}
	}
  static $original_collections = array();
  $source_entity = $context['source_entity'];
  $langcode = $context['langcode'];
  list(,,$bundle) = entity_extract_ids($context['entity_type'], $source_entity);
  $info_instances = field_info_instances($context['entity_type'], $bundle);
  $references = array();
  $nids = array();
  foreach ($info_instances as $prop_name => $instance) {
    $field_info = field_info_field($instance['field_name']);

    if ($context['entity_type'] == 'field_collection_item' and $instance['widget']['module'] == 'text') {
      $widget_type = $instance['widget']['type'];
      if ($widget_type == 'text_textfield' or $widget_type == 'text_textarea') {
        $original_collection = $original_collections[$entity->item_id];
        $entity->{$prop_name} = $original_collection->{$prop_name};
      }
    }
	if (empty($context['not_new'])) { unset($entity->field_title_for_indexing);}
    if ($field_info['field_name'] == 'field_title_for_indexing') {
        continue;
      }
	  
	  if ($field_info['type'] == 'entityreference') {
      if (empty($source_entity->{$prop_name})) {
        $entity->{$prop_name} = NULL;
        continue;
      }
      //$instance['widget']['type'] == 'entityreference_autocomplete' 'options_buttons' 'options_select'
      if ($field_info['settings']['target_type'] == 'taxonomy_term') {
        $entity->{$prop_name} = array('und' => array());
        unset($config);
        foreach ($source_entity->{$prop_name}['und'] as $delta => $config) {
          $term = taxonomy_term_load($config['target_id']);
          $t_term = i18n_taxonomy_term_get_translation($term, $langcode);
          $target_id = $t_term ? $t_term->tid : $term->tid;
          $entity->{$prop_name}['und'][$delta] = array('target_id' => $target_id);
        }
      }
      if ($field_info['settings']['target_type'] == 'node') {
        unset($config);
        foreach ($source_entity->{$prop_name}['und'] as $config) {
          $nids[$config['target_id']] = 1;
        }
        $references[] = $prop_name;
      }
    }

    if ($instance['widget']['type'] == 'field_collection_embed') {
      if (empty($source_entity->{$prop_name}['und'])) {
        if (!empty($entity->{$prop_name})) {
          foreach ($entity->{$prop_name}['und'] as $delta => $config) {
            field_collection_item_delete($config['value']);
          }
          $entity->{$prop_name} = NULL;
        }
        continue;
      }
      if (isset($source_entity->original)) {
        $synced = cm_extra_collection_sync($entity, $source_entity, $prop_name, $context['entity_type']);
        if (!$synced) {
          continue;
        }
      }
      unset($config);
      foreach ($source_entity->{$prop_name}['und'] as $delta => $config) {
        $source_collection = clone field_collection_item_load($config['value']);
        $source_collection->language = $context['source_langcode']; // i18n taxonomy hack
        $t_config = $entity->{$prop_name}['und'][$delta];
        $target_collection = field_collection_item_load($t_config['value']);
        $target_collection->language = $context['langcode'];
        $original_collections[$target_collection->item_id] = clone $target_collection;
        field_attach_prepare_translation('field_collection_item', $target_collection, $context['langcode'],
          $source_collection, $context['source_langcode']);
        $entity->{$prop_name}['und'][$delta]['entity'] = $target_collection;
      }
    }
  }

  if (!$nids) {
    return;
  }

  $query = db_select('node', 'n');
  $query->condition('n.nid', array_keys($nids));
  $query->join('node', 'tn', 'n.tnid = tn.tnid and n.tnid != 0');
  $query->condition('tn.language', $langcode);
  $query->addField('n','nid');
  $query->addField('tn','nid');
  $translations = $query->execute()->fetchAllKeyed();
  if (!$translations) {
    return;
  }

  foreach ($references as $prop_name) {
    $entity->{$prop_name} = array('und' => array());
    unset($config);
    foreach ($source_entity->{$prop_name}['und'] as $delta => $config) {
      $nid = $config['target_id'];
      if (isset($translations[$nid])) {
        $entity->{$prop_name}['und'][$delta] = array('target_id' => $translations[$nid]);
      }
    }
    if (!($entity->{$prop_name}['und'])) {
      unset($entity->{$prop_name});
      $entity->{$prop_name} = NULL;
    }
  }
}

function cm_extra_collection_sync($entity, $source_entity, $prop_name, $entity_type) {
  $map = array();
  $delete_candidates = array();
  $original = $source_entity->original;

  if ($entity->{$prop_name}) {
    if (count($entity->{$prop_name}['und']) != count($original->{$prop_name}['und'])) {
      return FALSE;
    }

    foreach ($original->{$prop_name}['und'] as $delta => $config) {
      $source_id = $config['value'];
      $target_config = $entity->{$prop_name}['und'][$delta];
      if ($target_config['value'] != $source_id) { // don't allow refering to same collection instance 
        $map[$source_id] = $target_config;
        $delete_candidates[$target_config['value']] = 1;
      }
    }
  }

  // reorder target or create new items
  foreach ($source_entity->{$prop_name}['und'] as $delta => $config) {
    $source_id = $config['value'];
    if (isset($map[$source_id])) {
      $target_config = $map[$source_id];
      unset($delete_candidates[$target_config['value']]);
      $entity->{$prop_name}['und'][$delta] = $target_config;
    }
    else {
      $new_collection = clone field_collection_item_load($source_id);
      $new_collection->item_id = NULL;
      $new_collection->revision_id = NULL;
      $new_collection->is_new = TRUE;
      $new_collection->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);
      $new_collection->save(TRUE);
      $entity->{$prop_name}['und'][$delta] = array(
        'value' => $new_collection->item_id,
        'revision_id' => $new_collection->revision_id,
      );
    }
  }
  foreach (array_keys($delete_candidates) as $id) {
    field_collection_item_delete($id);
  }

  return TRUE;
}

function cm_extra_i18n_sync_options($entity_type, $bundle) {
  return array(
    'cinematic_fields' => array(
      'title' => 'Cinematic fields',
      'description' => 'Custom collection and reference synchronization',
    ),
  );
}

function cm_extra_i18n_sync_translation($entity_type, $translation, $translation_language, $source, $source_language, $field_names) {
  if (!empty($source->is_new) && false) {
    return;
  }
  if (!in_array('cinematic_fields', $field_names)) {
    return;
  }
  $entity = $translation;
  $langcode = $translation_language;
  $context = array(
    'entity_type' => $entity_type,
    'langcode' => $langcode,
    'source_entity' => $source, 
    'source_langcode' => $source_language,
	'not_new'=>true,
  );
  cm_extra_field_attach_prepare_translation_alter($entity, $context);
}

function cm_extra_field_widget_options_select_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] != 'entityreference') {
    return;
  }
  if ($context['field']['settings']['target_type'] != 'taxonomy_term') {
    return;
  }
  $target_bundles = $context['field']['settings']['handler_settings']['target_bundles'];
  if (count($target_bundles) > 1) {
    return;
  }
  if (empty($element['#options'])) {
    return;
  }
  $tids = array_keys($element['#options']);
  if ($tids[0] == '_none') {
    unset($tids[0]);
  }
  $terms = taxonomy_term_load_multiple($tids);
  foreach ($element['#options'] as $tid => &$name) {
    if (isset($terms[$tid])) {
      $name = i18n_taxonomy_term_name($terms[$tid]);
    }
  }
}

function cm_extra_form_cm_event_node_form_alter(&$form, &$form_state) {
  $form['#process'][] = 'cm_extra_event_title';
}

function cm_extra_event_title($node_form, &$form_state) {
  $input = &$form_state['input'];
  if (empty($input['title'])) {
    if (!empty($input['field_cm_event_lineup']['und'][0])) {
      $target = $input['field_cm_event_lineup']['und'][0]['target_id'];
      preg_match("/(.+) \((\d+)\)/", $target, $matches);
      if (isset($matches[1])) {
        //$nid = $matches[2];
        $input['title'] = $matches[1];
      }
    }
  }
  return $node_form;
}

function cm_extra_menu() {
  $items = array();
  $items['yakoub_sync'] = array(
    'title' => 'yakoub sync',
    'page callback' => 'cm_extra_yakoub_save',
    'access arguments' => array('access content'),
  );
  return $items;
}

define('CM_CHANGED', '1483345994');
define('CM_PROP_NAME', 'field_cm_movie_credits');

function cm_extra_yakoub_delete() {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'cm_movie');
  $query->condition('n.language', 'he');
  $query->condition('n.changed', CM_CHANGED, '<=');
  $query->range(0, 100);
  $query->addField('n', 'nid');
  $nids = $query->execute()->fetchCol();
  dpm($nids);
  if ($nids) {
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      $node->field_cm_movie_credicts = NULL;
      // doesn't work
      node_save($node);
    }
  }
  return 'abcd';
}

function cm_extra_yakoub_save() {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'cm_movie_group');
  $query->condition('n.language', 'en');
  $query->condition('n.changed', CM_CHANGED, '<=');
  $query->range(0, 100);
  $query->addField('n', 'nid');
  $nids = $query->execute()->fetchCol();
  if ($nids) {
    dpm('done:' . count($nids));
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      try {
        i18n_sync(TRUE);
        node_save($node);
      }
      catch(Exception $e) {
        $count = !empty($node->{CM_PROP_NAME}) ? count($node->{CM_PROP_NAME}['und']) : 0;
        $message = 'not saved: ' . $node->nid . ', collection:' . $count;
        watchdog('yakoub group', $message);
      }
    }
  }
  else {
    dpm('finished');
  }
  return 'abcd';
}
