<?php

/**
 * @file
 * Internationalization (i18n) package. Synchronization of translations
 *
 * Provide synchronization functionality for taxonomy term entity fields.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18n_sync_taxonomy_term_form_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  if (isset($form['#vocabulary']->machine_name)) {
    $disabled = $form['#vocabulary']->i18n_mode != I18N_MODE_TRANSLATE;
    $form['i18n_sync'] = array(
      '#type' => 'fieldset',
      '#title' => t('Synchronize translations'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('i18n-node-type-settings-form'),
      ),
      '#description' => t('Select which fields to synchronize for all translations of this vocabulary.'),
      '#disabled' => $disabled,
      '#weight' => 10
    );

    $form['i18n_sync']['i18n_sync_taxonomy_term'] = array(
      '#tree' => TRUE,
    );

    // Each set provides title and options. We build a big checkboxes control for it to be
    // saved as an array.
    $current = i18n_sync_taxonomy_term_sync_fields($form['#vocabulary']->machine_name);
    // Group options, group fields by type.
    $groups = array(
      'taxonomy_term' => t('Standard term fields'),
      'fields' => t('Configurable fields'),
    );
    $fields = array();
    foreach (i18n_sync_taxonomy_term_options($form['#vocabulary']->machine_name) as $field => $info) {
      $group = isset($info['group']) && isset($groups[$info['group']]) ? $info['group'] : 'taxonomy_term';
      $fields[$group][$field] = $info;
    }

    foreach ($fields as $group => $group_fields) {
      $form['i18n_sync']['i18n_sync_taxonomy_term']['i18n_sync_group_' . $group] = array(
        '#prefix' => '<strong>', '#suffix' => '</strong>',
        '#markup' => $groups[$group],
      );
      foreach ($group_fields as $field => $info) {
        $form['i18n_sync']['i18n_sync_taxonomy_term'][$field] = array(
          '#title' => $info['title'],
          '#type' => 'checkbox',
          '#default_value' => in_array($field, $current),
          '#disabled' => $disabled,
          '#description' => isset($info['description']) ? $info['description'] : '',
        );
      }
    }

    $form['#submit'][] = 'i18n_sync_taxonomy_term_form_taxonomy_form_vocabulary_submit';
  }
}

/**
 * Form submission handler for taxonomy_form_vocabulary().
 */
function i18n_sync_taxonomy_term_form_taxonomy_form_vocabulary_submit($form, &$form_state) {
  // Manually handle storing of input into variables.
  if (isset($form_state['values']['i18n_sync_taxonomy_term'])) {
    $current_fields = i18n_sync_taxonomy_term_sync_fields($form['#vocabulary']->machine_name);
    $fields = array_filter($form_state['values']['i18n_sync_taxonomy_term']);
    if (empty($fields)) {
      // Wipe useless vars.
      if (!empty($current_fields)) {
        variable_del('i18n_sync_taxonomy_term_' . $form['#vocabulary']->machine_name);
      }
    }
    else {
      variable_set('i18n_sync_taxonomy_term_' . $form['#vocabulary']->machine_name, array_keys($fields));
    }
  }
}

/**
 * Check whether this term is to be synced
 */
function i18n_sync_taxonomy_term_check($term) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($term->vocabulary_machine_name);
  return $vocabulary->i18n_mode == I18N_MODE_TRANSLATE && i18n_object_langcode($term) && i18n_sync();
}

/**
 * Get term translations if any, excluding the term itself
 *
 * @param $reset
 *   Whether to reset the i18n_sync_taxonomy_term_get_translations cache.
 */
function i18n_sync_taxonomy_term_get_translations($term, $reset = FALSE) {
  if (!empty($term->translation_set->tsid)) {
    if ($reset) {
      // Clear the static cache of i18n_sync_taxonomy_term_get_translations
      $translations_cache = &drupal_static('i18n_sync_taxonomy_term_get_translations', array());
      unset($translations_cache[$term->translation_set->tsid]);
    }
    $translation_set = i18n_translation_set_load($term->translation_set->tsid);
    // Maybe translations are already here
    if ($translations = $translation_set->get_translations()) {
      unset($translations[$term->language]);
      return $translations;
    }
  }
  return FALSE;
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function i18n_sync_taxonomy_term_taxonomy_term_insert($term) {
  // When creating a translation, there are some aditional steps, different from update
  if (i18n_sync_taxonomy_term_check($term)) {
    i18n_sync_taxonomy_term_taxonomy_term_update($term);
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function i18n_sync_taxonomy_term_taxonomy_term_update($term) {
  // Let's go with field synchronization.
  if (i18n_sync_taxonomy_term_check($term) && !empty($term->translation_set->tsid)
    && ($fields = i18n_sync_taxonomy_term_sync_fields($term->vocabulary_machine_name)) && ($translations = i18n_sync_taxonomy_term_get_translations($term, TRUE))) {
    i18n_sync_taxonomy_term_translation($term, $translations, $fields, 'update');
  }
}

/**
 * Implements hook_field_attach_form().
 *
 * As we have no alternative for terms like hook_node_prepare() and hook into field attaching.
 */
function i18n_sync_taxonomy_term_field_attach_form($entity_type, $entity, &$form, $form_state, $langcode) {
  if ($entity_type == 'taxonomy_term' && empty($entity->tid) && !empty($_GET['translation']) && !empty($_GET['target'])) {

    $source = taxonomy_term_load($_GET['translation']);
    if ($source) {
      // todo not sure about that way, but it's copied from translation_node_prepare().
      $language_list = language_list();
      $langcode = $_GET['target'];
      if (!isset($language_list[$langcode]) || ($source->language == $langcode)) {
        // If not supported language, or same language as source term, break.
        return;
      }

      // Ensure we don't have an existing translation in this language.
      if (!empty($source->i18n_tsid)) {
        $translations = i18n_sync_taxonomy_term_get_translations($source->i18n_tsid);
        if (isset($translations[$langcode])) {
          return;
        }
      }

      // Populate fields based on source term.
      $entity->language = $langcode;

      // Check translation availability after language detection.
      if (!i18n_sync_taxonomy_term_check($entity)) {
        return;
      }

      // Attach values from source term.
      field_attach_prepare_translation('taxonomy_term', $entity, $langcode, $source, $source->language);

      // Re-invoke field building to apply enitity changed values.
      $updated_form = (array) _field_invoke_default('form', $entity_type, $entity, $form, $form_state, array());
      $form = $updated_form + $form;
    }
  }
}

/**
 * Returns list of fields to synchronize for a given content type.
 *
 * @param $vocabulary_name
 *   Vocabulary machine name.
 * @param $field
 *   Optional field name to check whether it is in the list
 */
function i18n_sync_taxonomy_term_sync_fields($vocabulary_name, $field = NULL) {
  $fields = variable_get('i18n_sync_taxonomy_term_' . $vocabulary_name, array());
  return $field ? in_array($field, $fields) : $fields;
}

/**
 * Returns list of available fields for given content type.
 *
 * Fields can also be changed using hook_i18n_sync_fields_alter($fields, $type)
 *
 * @param $vocabulary_name
 *   Vocabulary machine name.
 */
function i18n_sync_taxonomy_term_options($vocabulary_name) {
  return i18n_sync_options('taxonomy_term', $vocabulary_name);
}

/**
 * Implements hook_i18n_sync_options().
 */
function i18n_sync_taxonomy_term_i18n_sync_options($entity_type, $bundle_name) {
  if ($entity_type == 'taxonomy_term') {
    return array(
      'name' => array('title' => t('Name')),
      'description' => array('title' => t('Description')),
    );
  }
}

/**
 * Synchronizes fields for term translation.
 *
 * There's some specific handling for known fields like:
 * - files, for file attachments.
 * - iid (CCK term attachments, translations for them will be handled too).
 *
 * All the rest of the fields will be just copied over.
 * The 'revision' field will have the special effect of creating a revision too for the translation.
 *
 * @param $term
 *   Source term being edited.
 * @param $translations
 *   Term translations to synchronize, just needs nid property.
 * @param $fields
 *   List of fields to synchronize.
 * @param $op
 *   Term operation (insert|update).
 */
function i18n_sync_taxonomy_term_translation($term, $translations, $field_names, $op) {
  $count = 0;
  // Disable language selection and synchronization temporarily, enable it again later
  $i18n_select = i18n_select(FALSE);
  i18n_sync(FALSE);
  foreach ($translations as $translation) {
    // If translation is the same term, we cannot synchronize with itself
    if ($term->tid == $translation->tid) {
      continue;
    }
    // Load full term, we need all data here.
    $translation = taxonomy_term_load($translation->tid);
    $i18n_options = i18n_sync_taxonomy_term_options($term->vocabulary_machine_name);
    // Invoke callback for each field, the default is just copy over
    foreach ($field_names as $field) {
      if (!empty($i18n_options[$field]['field_name'])) {
        i18n_sync_field_translation_sync('taxonomy_term', $term->vocabulary_machine_name, $translation, $translation->language, $term, $term->language, $i18n_options[$field]['field_name']);
      }
      elseif (isset($term->$field)) {
        // Standard term field, just copy over.
        $translation->$field = $term->$field;
      }
    }
    // Give a chance to other modules for additional sync
    module_invoke_all('i18n_sync_translation', 'taxonomy_term', $translation, $translation->language, $term, $term->language, $field_names);
    taxonomy_term_save($translation);
    $count++;
  }
  i18n_sync(TRUE);
  i18n_select($i18n_select);
  drupal_set_message(format_plural($count, 'One term translation has been synchronized.', 'All @count term translations have been synchronized.'));
}
